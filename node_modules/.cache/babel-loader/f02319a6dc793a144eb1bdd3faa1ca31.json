{"ast":null,"code":"import { userConstants } from '../constants';\nimport { userService } from '../services';\nimport { history, isError, frameAlert, serverOffError } from '../helpers';\nimport { alertActions } from './alert.action';\nimport Swal from 'sweetalert2';\nexport const userActions = {\n  registerUser\n};\n\nfunction registerUser(email, password, firstName, lastName) {\n  return dispatch => {\n    dispatch(request({\n      email,\n      firstName,\n      lastName\n    }));\n    userService.registerUser(email, password, firstName, lastName).then(user => {\n      if (isError(user.data)) {\n        dispatch(failure(user.data));\n        dispatch(alertActions.error(frameAlert(user.data)));\n      } else {\n        dispatch(success(user.data));\n        dispatch(alertActions.success(frameAlert(user.data))); // history.push('/verify-email');\n      }\n    }, error => {\n      history.push('/register');\n      dispatch(failure(error));\n      dispatch(alertActions.error(serverOffError()));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.REGISTER_USER_REQUEST\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_USER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_USER_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/home/techkopra-arihant/Arihant/register-using-react-redux/register-using-react-redux/src/actions/user.actions.js"],"names":["userConstants","userService","history","isError","frameAlert","serverOffError","alertActions","Swal","userActions","registerUser","email","password","firstName","lastName","dispatch","request","then","user","data","failure","error","success","push","type","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,EAAuCC,cAAvC,QAA4D,YAA5D;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA;AADuB,CAApB;;AAIP,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,QAAlD,EAA4D;AACxD,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAAC;AAAEL,MAAAA,KAAF;AAASE,MAAAA,SAAT;AAAoBC,MAAAA;AAApB,KAAD,CAAR,CAAR;AAEAZ,IAAAA,WAAW,CAACQ,YAAZ,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,SAA1C,EAAqDC,QAArD,EACKG,IADL,CAEQC,IAAI,IAAI;AACJ,UAAId,OAAO,CAACc,IAAI,CAACC,IAAN,CAAX,EAAwB;AACpBJ,QAAAA,QAAQ,CAACK,OAAO,CAACF,IAAI,CAACC,IAAN,CAAR,CAAR;AACAJ,QAAAA,QAAQ,CAACR,YAAY,CAACc,KAAb,CAAmBhB,UAAU,CAACa,IAAI,CAACC,IAAN,CAA7B,CAAD,CAAR;AACH,OAHD,MAGO;AACHJ,QAAAA,QAAQ,CAACO,OAAO,CAACJ,IAAI,CAACC,IAAN,CAAR,CAAR;AACAJ,QAAAA,QAAQ,CAACR,YAAY,CAACe,OAAb,CAAqBjB,UAAU,CAACa,IAAI,CAACC,IAAN,CAA/B,CAAD,CAAR,CAFG,CAGH;AACH;AACJ,KAXT,EAYQE,KAAK,IAAI;AACLlB,MAAAA,OAAO,CAACoB,IAAR,CAAa,WAAb;AACAR,MAAAA,QAAQ,CAACK,OAAO,CAACC,KAAD,CAAR,CAAR;AACAN,MAAAA,QAAQ,CAACR,YAAY,CAACc,KAAb,CAAmBf,cAAc,EAAjC,CAAD,CAAR;AACH,KAhBT;AAkBH,GArBD;;AAuBA,WAASU,OAAT,GAAmB;AAAE,WAAO;AAAEQ,MAAAA,IAAI,EAAEvB,aAAa,CAACwB;AAAtB,KAAP;AAAsD;;AAC3E,WAASH,OAAT,CAAiBJ,IAAjB,EAAuB;AAAE,WAAO;AAAEM,MAAAA,IAAI,EAAEvB,aAAa,CAACyB,qBAAtB;AAA6CR,MAAAA;AAA7C,KAAP;AAA4D;;AACrF,WAASE,OAAT,CAAiBC,KAAjB,EAAwB;AAAE,WAAO;AAAEG,MAAAA,IAAI,EAAEvB,aAAa,CAAC0B,qBAAtB;AAA6CN,MAAAA;AAA7C,KAAP;AAA6D;AAC1F","sourcesContent":["import { userConstants } from '../constants';\nimport { userService } from '../services';\nimport { history, isError, frameAlert, serverOffError} from '../helpers';\nimport { alertActions } from './alert.action';\nimport Swal from 'sweetalert2';\n\nexport const userActions = {\n    registerUser\n};\n\nfunction registerUser(email, password, firstName, lastName) {\n    return dispatch => {\n        dispatch(request({ email, firstName, lastName }));\n\n        userService.registerUser(email, password, firstName, lastName)\n            .then(\n                user => {\n                    if (isError(user.data)) {\n                        dispatch(failure(user.data));\n                        dispatch(alertActions.error(frameAlert(user.data)));\n                    } else {\n                        dispatch(success(user.data));\n                        dispatch(alertActions.success(frameAlert(user.data)));\n                        // history.push('/verify-email');\n                    }\n                },\n                error => {\n                    history.push('/register');\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(serverOffError()));\n                }\n            );\n    };\n\n    function request() { return { type: userConstants.REGISTER_USER_REQUEST } }\n    function success(user) { return { type: userConstants.REGISTER_USER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_USER_FAILURE, error } }\n}"]},"metadata":{},"sourceType":"module"}